import 'dart:ui';
import 'package:Shepower/core/utils/size_utils.dart';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onErrorContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          shadowColor: appTheme.black900.withOpacity(0.25),
          elevation: 2,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray100,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray600,
          fontSize: 16.fSize,
          fontFamily: 'Nunito Sans',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.blueGray80001,
          fontSize: 13.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.blueGray80001,
          fontSize: 11.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        displayLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 61.fSize,
          fontFamily: 'Mervale Script',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 48.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w500,
        ),
        displaySmall: TextStyle(
          color: appTheme.blueGray10001,
          fontSize: 39.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w600,
        ),
        headlineLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 30.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: appTheme.gray900,
          fontSize: 24.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w800,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray900,
          fontSize: 12.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.blueGray10001,
          fontSize: 11.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w600,
        ),
        labelSmall: TextStyle(
          color: appTheme.blueGray800,
          fontSize: 9.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w800,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onErrorContainer.withOpacity(1),
          fontSize: 21.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w800,
        ),
        titleMedium: TextStyle(
          color: appTheme.indigo900,
          fontSize: 16.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 15.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF630772),
    primaryContainer: Color(0XFFEF635A),
    secondaryContainer: Color(0X87630772),

    // Error colors
    errorContainer: Color(0XFF34373A),
    onError: Color(0XFF620771),
    onErrorContainer: Color(0XB2FFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XFFC4C4C4),
    onPrimaryContainer: Color(0X7F110C26),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF000000);

  // Blacke
  Color get black9001e => Color(0X1E090909);

  // BlueGray
  Color get blueGray100 => Color(0XFFDCD4D9);
  Color get blueGray10001 => Color(0XFFD9D9D9);
  Color get blueGray10002 => Color(0XFFCCCED5);
  Color get blueGray200 => Color(0XFFB3B9C9);
  Color get blueGray300 => Color(0XFF99A1BE);
  Color get blueGray50 => Color(0XFFEDF2F7);
  Color get blueGray500 => Color(0XFF716E90);
  Color get blueGray50001 => Color(0XFF60709D);
  Color get blueGray700 => Color(0XFF525767);
  Color get blueGray70001 => Color(0XFF535767);
  Color get blueGray800 => Color(0XFF474A57);
  Color get blueGray80001 => Color(0XFF3D4260);
  Color get blueGray900 => Color(0XFF33363A);
  Color get blueGray90001 => Color(0XFF333333);
  Color get blueGray90002 => Color(0XFF2A2749);

  // BlueGrayf
  Color get blueGray6000f => Color(0X0F4F5588);

  // Cyan
  Color get cyan900 => Color(0XFF006175);

  // DeepOrange
  Color get deepOrange500 => Color(0XFFF8592B);
  Color get deepOrangeA700 => Color(0XFFE31616);

  // DeepPurple
  Color get deepPurple100 => Color(0XFFC6B9D9);

  // Gray
  Color get gray100 => Color(0XFFF1F4F5);
  Color get gray10001 => Color(0XFFF5F5F5);
  Color get gray10002 => Color(0XFFF2F2F2);
  Color get gray200 => Color(0XFFE8EAED);
  Color get gray20001 => Color(0XFFECECEC);
  Color get gray20002 => Color(0XFFE8E8E8);
  Color get gray400 => Color(0XFFB2ACB0);
  Color get gray40001 => Color(0XFFC1C1C1);
  Color get gray40002 => Color(0XFFD0BAA8);
  Color get gray50 => Color(0XFFFCFCFC);
  Color get gray500 => Color(0XFF949393);
  Color get gray50001 => Color(0XFF949292);
  Color get gray50002 => Color(0XFF979797);
  Color get gray600 => Color(0XFF747688);
  Color get gray60001 => Color(0XFF747578);
  Color get gray700 => Color(0XFF666666);
  Color get gray70001 => Color(0XFF606268);
  Color get gray70002 => Color(0XFF606060);
  Color get gray800 => Color(0XFF3D3D3F);
  Color get gray80001 => Color(0XFF424242);
  Color get gray900 => Color(0XFF18191F);
  Color get gray90001 => Color(0XFF231F20);
  Color get gray90002 => Color(0XFF252627);
  Color get gray90003 => Color(0XFF262627);
  Color get gray90004 => Color(0XFF182035);

  // Grayd
  Color get gray6002d => Color(0X2D717171);

  // Green
  Color get green300 => Color(0XFF68D391);

  // Indigof
  Color get indigo3003f => Color(0X3F6F7DC8);

  // Indigo
  Color get indigo800 => Color(0XFF2D3F7B);
  Color get indigo900 => Color(0XFF19295C);
  Color get indigoA700 => Color(0XFF3F38DD);

  // Orange
  Color get orange200 => Color(0XFFFFCD6B);

  // Pink
  Color get pink10033 => Color(0X33F9A3D6);
  Color get pink200 => Color(0XFFFC86CD);
  Color get pinkA700 => Color(0XFFD80683);

  // Purple
  Color get purple300 => Color(0XFFCA6AA4);
  Color get purple800 => Color(0XFF763A80);
  Color get purpleA10033 => Color(0X33E085EF);

  // Red
  Color get red50 => Color(0XFFFCE9F5);
  Color get red5001 => Color(0XFFFFE6F5);
  Color get red5002 => Color(0XFFFFE7F5);
  Color get red5003 => Color(0XFFFDEAF5);
  Color get red600 => Color(0XFFE23232);
  Color get red800 => Color(0XFFD81E1E);
  Color get redA700 => Color(0XFFD60606);

  // Teal
  Color get tealA700 => Color(0XFF00B6AA);

  // Yellow
  Color get yellow800 => Color(0XFFF79E1B);
  Color get yellow90028 => Color(0X28F58128);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
